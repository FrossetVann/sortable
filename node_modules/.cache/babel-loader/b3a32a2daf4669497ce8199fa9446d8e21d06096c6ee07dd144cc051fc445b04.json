{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_draggable = _resolveComponent(\"draggable\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.currentProject.name), 1 /* TEXT */), _createVNode(_component_draggable, {\n    modelValue: _ctx.currentProject.boards,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.currentProject.boards = $event),\n    tag: \"div\",\n    class: \"workspace\"\n  }, {\n    item: _withCtx(({\n      element: board,\n      index: i\n    }) => [(_openBlock(), _createElementBlock(\"div\", {\n      class: \"board\",\n      key: i\n    }, [_createElementVNode(\"h2\", null, _toDisplayString(board.name), 1 /* TEXT */), (_openBlock(), _createBlock(_component_draggable, {\n      modelValue: board.columns,\n      \"onUpdate:modelValue\": $event => board.columns = $event,\n      tag: \"div\",\n      class: \"column\",\n      key: i,\n      onEnd: $options.onTaskDragEnd\n    }, {\n      item: _withCtx(({\n        element: column,\n        index: j\n      }) => [(_openBlock(), _createElementBlock(\"div\", {\n        class: \"column\",\n        key: j\n      }, [_createElementVNode(\"h3\", null, _toDisplayString(column.name), 1 /* TEXT */), (_openBlock(), _createBlock(_component_draggable, {\n        modelValue: column.tasks,\n        \"onUpdate:modelValue\": $event => column.tasks = $event,\n        tag: \"ul\",\n        class: \"tasks\",\n        key: j,\n        onEnd: $options.onTaskDragEnd\n      }, {\n        item: _withCtx(({\n          element: task,\n          index: k\n        }) => [(_openBlock(), _createElementBlock(\"li\", {\n          class: \"task\",\n          key: k\n        }, [_createElementVNode(\"h4\", null, _toDisplayString(task.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Deadline: \" + _toDisplayString(task.deadline), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(task.timeRemaining), 1 /* TEXT */), _createElementVNode(\"button\", {\n          onClick: $event => $options.removeTask(i, j, k)\n        }, \"Удалить задачу\", 8 /* PROPS */, _hoisted_1)]))]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\", \"onEnd\"])), _createElementVNode(\"button\", {\n        onClick: $event => $options.addItem(i, j)\n      }, \"Добавить задачу\", 8 /* PROPS */, _hoisted_2)]))]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\", \"onEnd\"])), _createElementVNode(\"button\", {\n      onClick: $event => $options.addColumn(i)\n    }, \"Добавить колонку\", 8 /* PROPS */, _hoisted_3)]))]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","_ctx","currentProject","name","_createVNode","_component_draggable","boards","$event","tag","class","item","_withCtx","element","board","index","i","key","_createBlock","columns","onEnd","$options","onTaskDragEnd","column","j","tasks","task","k","deadline","timeRemaining","onClick","removeTask","_hoisted_1","addItem","_hoisted_2","addColumn","_hoisted_3"],"sources":["C:\\Users\\user\\Desktop\\tasker5\\sortable\\src\\views\\BoardComp.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>{{ currentProject.name }}</h1>\n    <draggable v-model=\"currentProject.boards\" tag=\"div\" class=\"workspace\">\n      <template #item=\"{ element: board, index: i }\">\n        <div class=\"board\" :key=\"i\">\n          <h2>{{ board.name }}</h2>\n          <draggable v-model=\"board.columns\" tag=\"div\" class=\"column\" :key=\"i\" @end=\"onTaskDragEnd\">\n            <template #item=\"{ element: column, index: j }\">\n              <div class=\"column\" :key=\"j\">\n                <h3>{{ column.name }}</h3>\n                <draggable v-model=\"column.tasks\" tag=\"ul\" class=\"tasks\" :key=\"j\" @end=\"onTaskDragEnd\">\n                  <template #item=\"{ element: task, index: k }\">\n                    <li class=\"task\" :key=\"k\">\n                      <h4>{{ task.name }}</h4>\n                      <p>Deadline: {{ task.deadline }}</p>\n                      <p>{{ task.timeRemaining }}</p>\n                      <button @click=\"removeTask(i, j, k)\">Удалить задачу</button>\n                    </li>\n                  </template>\n                </draggable>\n                <button @click=\"addItem(i, j)\">Добавить задачу</button>\n              </div>\n            </template>\n          </draggable>\n          <button @click=\"addColumn(i)\">Добавить колонку</button>\n        </div>\n      </template>\n    </draggable>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport draggable from 'vuedraggable';\n\nexport default {\n  data() {\n    return {\n      boardData: {\n        columns: [\n          {\n            name: 'Колонка 1',\n            tasks: [\n              { name: 'Задача 1.1', order: 1, deadline: '2023-12-31' },\n              { name: 'Задача 1.2', order: 2, deadline: '2024-12-31' },\n            ],\n            order: 1,\n          },\n          {\n            name: 'Колонка 2',\n            tasks: [\n              { name: 'Задача 2.1', order: 1, deadline: '2023-12-31' },\n              { name: 'Задача 2.2', order: 2, deadline: '2024-12-31' },\n            ],\n            order: 2,\n          },\n        ],\n      },\n      timestamp: \"\"\n    };\n  },\n  // created() {\n  //   setInterval(this.updateTimeRemaining, 1000);\n  // },\n  methods: {\n    addColumn() {\n      const newColumn = {\n        name: 'Новая колонка',\n        tasks: [],\n        order: this.boardData.columns.length + 1,\n      };\n      this.boardData.columns.push(newColumn);\n    },\n    addItem(columnIndex) {\n      if (this.columns[columnIndex]) {\n\n        const deadline = new Date();\n        deadline.setDate(deadline.getDate() + 1); \n        this.columns[columnIndex].tasks.push({\n          name: '',\n          showNameInput: false,\n          columnIndex,\n          deadline: deadline.toISOString(), \n        });\n      }\n    },\n    removeTask(columnIndex, taskIndex) {\n      if (this.columns[columnIndex] && this.columns[columnIndex].tasks[taskIndex]) {\n        this.columns[columnIndex].tasks.splice(taskIndex, 1);\n      }\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {\n      \n    },\n    updateTimeRemaining() {\n      const now = new Date();\n      this.columns.forEach(column => {\n        column.tasks.forEach(task => {\n          const deadlineDate = new Date(task.deadline);\n          const timeDifference = deadlineDate - now;\n          const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n          const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n          const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n          task.timeRemaining = `${days} д. ${hours} ч. ${minutes} м. ${seconds} с.`;\n        });\n      });\n    },\n  },\n  computed: {\n    // Преобразование порядка колонок в массив колонок\n    columns() {\n      return this.boardData.columns.sort((a, b) => a.order - b.order);\n    },\n  },\n  components: {\n    draggable,\n  },\n};\n</script>\n"],"mappings":";;;;;;uBACEA,mBAAA,CA4BM,cA3BJC,mBAAA,CAAkC,YAAAC,gBAAA,CAA3BC,IAAA,CAAAC,cAAc,CAACC,IAAI,kBAC1BC,YAAA,CAyBYC,oBAAA;gBAzBQJ,IAAA,CAAAC,cAAc,CAACI,MAAM;+DAArBL,IAAA,CAAAC,cAAc,CAACI,MAAM,GAAAC,MAAA;IAAEC,GAAG,EAAC,KAAK;IAACC,KAAK,EAAC;;IAC9CC,IAAI,EAAAC,QAAA,CACb,CAqBM;MAAAC,OAAA,EAtBoBC,KAAK;MAAAC,KAAA,EAASC;IAAC,Q,cACzCjB,mBAAA,CAqBM;MArBDW,KAAK,EAAC,OAAO;MAAEO,GAAG,EAAED;QACvBhB,mBAAA,CAAyB,YAAAC,gBAAA,CAAlBa,KAAK,CAACV,IAAI,mB,cACjBc,YAAA,CAiBYZ,oBAAA;kBAjBQQ,KAAK,CAACK,OAAO;uCAAbL,KAAK,CAACK,OAAO,GAAAX,MAAA;MAAEC,GAAG,EAAC,KAAK;MAACC,KAAK,EAAC,QAAQ;MAAEO,GAAG,EAAED,CAAC;MAAGI,KAAG,EAAEC,QAAA,CAAAC;;MAC9DX,IAAI,EAAAC,QAAA,CACb,CAaM;QAAAC,OAAA,EAdoBU,MAAM;QAAAR,KAAA,EAASS;MAAC,Q,cAC1CzB,mBAAA,CAaM;QAbDW,KAAK,EAAC,QAAQ;QAAEO,GAAG,EAAEO;UACxBxB,mBAAA,CAA0B,YAAAC,gBAAA,CAAnBsB,MAAM,CAACnB,IAAI,mB,cAClBc,YAAA,CASYZ,oBAAA;oBATQiB,MAAM,CAACE,KAAK;yCAAZF,MAAM,CAACE,KAAK,GAAAjB,MAAA;QAAEC,GAAG,EAAC,IAAI;QAACC,KAAK,EAAC,OAAO;QAAEO,GAAG,EAAEO,CAAC;QAAGJ,KAAG,EAAEC,QAAA,CAAAC;;QAC3DX,IAAI,EAAAC,QAAA,CACb,CAKK;UAAAC,OAAA,EANqBa,IAAI;UAAAX,KAAA,EAASY;QAAC,Q,cACxC5B,mBAAA,CAKK;UALDW,KAAK,EAAC,MAAM;UAAEO,GAAG,EAAEU;YACrB3B,mBAAA,CAAwB,YAAAC,gBAAA,CAAjByB,IAAI,CAACtB,IAAI,kBAChBJ,mBAAA,CAAoC,WAAjC,YAAU,GAAAC,gBAAA,CAAGyB,IAAI,CAACE,QAAQ,kBAC7B5B,mBAAA,CAA+B,WAAAC,gBAAA,CAAzByB,IAAI,CAACG,aAAa,kBACxB7B,mBAAA,CAA4D;UAAnD8B,OAAK,EAAAtB,MAAA,IAAEa,QAAA,CAAAU,UAAU,CAACf,CAAC,EAAEQ,CAAC,EAAEG,CAAC;WAAG,gBAAc,iBAAAK,UAAA,E;;4FAIzDhC,mBAAA,CAAuD;QAA9C8B,OAAK,EAAAtB,MAAA,IAAEa,QAAA,CAAAY,OAAO,CAACjB,CAAC,EAAEQ,CAAC;SAAG,iBAAe,iBAAAU,UAAA,E;;0FAIpDlC,mBAAA,CAAuD;MAA9C8B,OAAK,EAAAtB,MAAA,IAAEa,QAAA,CAAAc,SAAS,CAACnB,CAAC;OAAG,kBAAgB,iBAAAoB,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}