{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport draggable from 'vuedraggable';\nexport default {\n  data() {\n    return {\n      boardData: {\n        columns: [{\n          name: 'Колонка 1',\n          tasks: [{\n            name: 'Задача 1.1',\n            order: 1\n          }, {\n            name: 'Задача 1.2',\n            order: 2\n          }],\n          order: 1\n        }, {\n          name: 'Колонка 2',\n          tasks: [{\n            name: 'Задача 2.1',\n            order: 1\n          }, {\n            name: 'Задача 2.2',\n            order: 2\n          }],\n          order: 2\n        }]\n      },\n      timestamp: \"\"\n    };\n  },\n  created() {\n    setInterval(this.updateTimeRemaining, 1000);\n  },\n  methods: {\n    addColumn() {\n      const newColumn = {\n        name: 'Новая колонка',\n        tasks: [],\n        order: this.boardData.columns.length + 1\n      };\n      this.boardData.columns.push(newColumn);\n    },\n    addItem(columnIndex) {\n      if (this.columns[columnIndex]) {\n        const deadline = new Date();\n        deadline.setDate(deadline.getDate() + 1);\n        this.columns[columnIndex].tasks.push({\n          name: '',\n          showNameInput: false,\n          columnIndex,\n          deadline: deadline.toISOString()\n        });\n      }\n    },\n    removeTask(columnIndex, taskIndex) {\n      if (this.columns[columnIndex] && this.columns[columnIndex].tasks[taskIndex]) {\n        this.columns[columnIndex].tasks.splice(taskIndex, 1);\n      }\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {},\n    updateTimeRemaining() {\n      const now = new Date();\n      this.columns.forEach(column => {\n        column.tasks.forEach(task => {\n          const deadlineDate = new Date(task.deadline);\n          const timeDifference = deadlineDate - now;\n          const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n          const hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n          const minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60));\n          const seconds = Math.floor(timeDifference % (1000 * 60) / 1000);\n          task.timeRemaining = `${days} д. ${hours} ч. ${minutes} м. ${seconds} с.`;\n        });\n      });\n    }\n  },\n  computed: {\n    // Преобразование порядка колонок в массив колонок\n    columns() {\n      return this.boardData.columns.sort((a, b) => a.order - b.order);\n    }\n  },\n  components: {\n    draggable\n  }\n};","map":{"version":3,"names":["ref","draggable","data","boardData","columns","name","tasks","order","timestamp","created","setInterval","updateTimeRemaining","methods","addColumn","newColumn","length","push","addItem","columnIndex","deadline","Date","setDate","getDate","showNameInput","toISOString","removeTask","taskIndex","splice","removeColumn","toggleNameInput","forEach","column","index","toggleTaskNameInput","task","onTaskDragEnd","now","deadlineDate","timeDifference","days","Math","floor","hours","minutes","seconds","timeRemaining","computed","sort","a","b","components"],"sources":["C:\\Users\\user\\Desktop\\tasker5\\sortable\\src\\views\\BoardComp.vue"],"sourcesContent":["<template>\n  <main>\n    <h1>доска</h1>\n    <draggable v-model=\"boardData.columns\" tag=\"div\" class=\"workspace\">\n      <template #item=\"{ element: column, index: i }\">\n        <draggable v-model=\"column.tasks\" tag=\"ul\" class=\"column\" :key=\"i\" @end=\"onTaskDragEnd\">\n        <template #header>\n          <input\n            v-if=\"column.showNameInput\"\n            v-model=\"column.name\" class=\"column-name-input column-name\" type=\"text\"\n            @keyup.enter=\"toggleNameInput(i)\"\n          />\n          <h3\n            v-else\n            @click=\"toggleNameInput(i)\"\n            class=\"column-name\">\n            <p v-show=\"column.name === ''\">{{ i }}</p>\n            {{ column.name }}\n          </h3>\n          <button class=\"delete btn\" @click=\"removeColumn(i)\">удалить</button>\n        </template>\n        <template #item=\"{ element: task, index: j }\">\n          <li class=\"task\" :key=\"j\">\n            <input\n              v-if=\"task.showNameInput\"\n              v-model=\"task.name\" class=\"task-name-input\" type=\"text\"\n              @keyup.enter=\"toggleTaskNameInput(i, j)\"\n            />\n            <h4\n              v-else\n              @click=\"toggleTaskNameInput(i, j)\"\n              class=\"task-name\">\n              <p v-show=\"task.name === ''\">{{ j }}</p>\n              {{ task.name }}\n              {{ task.timeRemaining }}\n            </h4>\n            <button class=\"delete btn\" @click=\"removeTask(i, j)\">удалить</button>\n          </li>\n        </template>\n        <template #footer>\n          <div class=\"form-control\">\n            <button @click=\"addItem(i)\">создать таск</button>\n          </div>\n        </template>\n      </draggable>\n      </template>\n    </draggable>\n    <div class=\"form-control\">\n      <button @click=\"addColumn\">создать колонку</button>\n    </div>\n  </main>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport draggable from 'vuedraggable';\n\nexport default {\n  data() {\n    return {\n      boardData: {\n        columns: [\n          {\n            name: 'Колонка 1',\n            tasks: [\n              { name: 'Задача 1.1', order: 1 },\n              { name: 'Задача 1.2', order: 2 },\n            ],\n            order: 1,\n          },\n          {\n            name: 'Колонка 2',\n            tasks: [\n              { name: 'Задача 2.1', order: 1 },\n              { name: 'Задача 2.2', order: 2 },\n            ],\n            order: 2,\n          },\n        ],\n      },\n      timestamp: \"\"\n    };\n  },\n  created() {\n    setInterval(this.updateTimeRemaining, 1000);\n  },\n  methods: {\n    addColumn() {\n      const newColumn = {\n        name: 'Новая колонка',\n        tasks: [],\n        order: this.boardData.columns.length + 1,\n      };\n      this.boardData.columns.push(newColumn);\n    },\n    addItem(columnIndex) {\n      if (this.columns[columnIndex]) {\n\n        const deadline = new Date();\n        deadline.setDate(deadline.getDate() + 1); \n        this.columns[columnIndex].tasks.push({\n          name: '',\n          showNameInput: false,\n          columnIndex,\n          deadline: deadline.toISOString(), \n        });\n      }\n    },\n    removeTask(columnIndex, taskIndex) {\n      if (this.columns[columnIndex] && this.columns[columnIndex].tasks[taskIndex]) {\n        this.columns[columnIndex].tasks.splice(taskIndex, 1);\n      }\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {\n      \n    },\n    updateTimeRemaining() {\n      const now = new Date();\n      this.columns.forEach(column => {\n        column.tasks.forEach(task => {\n          const deadlineDate = new Date(task.deadline);\n          const timeDifference = deadlineDate - now;\n          const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n          const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n          const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n          task.timeRemaining = `${days} д. ${hours} ч. ${minutes} м. ${seconds} с.`;\n        });\n      });\n    },\n  },\n  computed: {\n    // Преобразование порядка колонок в массив колонок\n    columns() {\n      return this.boardData.columns.sort((a, b) => a.order - b.order);\n    },\n  },\n  components: {\n    draggable,\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}