{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport draggable from 'vuedraggable';\nimport { projects } from '../projects';\nexport default {\n  data() {\n    return {\n      projects: projects,\n      currentProject: null\n    };\n  },\n  created() {\n    // Получаем projectId из параметров маршрута\n    const projectId = this.$route.params.projectId;\n    // Находим проект по projectId\n    this.currentProject = this.projects.find(project => project.id === parseInt(projectId));\n  },\n  // created() {\n  //   setInterval(this.updateTimeRemaining, 1000);\n  // },\n  methods: {\n    addItem(boardIndex, columnIndex) {\n      // Добавление новой задачи в выбранную колонку\n      const deadline = new Date();\n      deadline.setDate(deadline.getDate() + 1);\n      this.currentProject.boards[boardIndex].columns[columnIndex].tasks.push({\n        name: '',\n        showNameInput: false,\n        columnIndex,\n        deadline: deadline.toISOString()\n      });\n    },\n    removeTask(boardIndex, columnIndex, taskIndex) {\n      // Удаление задачи из выбранной колонки\n      this.currentProject.boards[boardIndex].columns[columnIndex].tasks.splice(taskIndex, 1);\n    },\n    addColumn(boardIndex) {\n      // Добавление новой колонки в выбранную доску\n      this.currentProject.boards[boardIndex].columns.push({\n        name: 'Новая колонка',\n        tasks: [],\n        order: this.currentProject.boards[boardIndex].columns.length + 1\n      });\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {},\n    updateTimeRemaining() {\n      const now = new Date();\n      this.columns.forEach(column => {\n        column.tasks.forEach(task => {\n          const deadlineDate = new Date(task.deadline);\n          const timeDifference = deadlineDate - now;\n          const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n          const hours = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n          const minutes = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60));\n          const seconds = Math.floor(timeDifference % (1000 * 60) / 1000);\n          task.timeRemaining = `${days} д. ${hours} ч. ${minutes} м. ${seconds} с.`;\n        });\n      });\n    }\n  },\n  computed: {\n    // Преобразование порядка колонок в массив колонок\n    columns() {\n      return this.boardData.columns.sort((a, b) => a.order - b.order);\n    }\n  },\n  components: {\n    draggable\n  }\n};","map":{"version":3,"names":["ref","draggable","projects","data","currentProject","created","projectId","$route","params","find","project","id","parseInt","methods","addItem","boardIndex","columnIndex","deadline","Date","setDate","getDate","boards","columns","tasks","push","name","showNameInput","toISOString","removeTask","taskIndex","splice","addColumn","order","length","removeColumn","toggleNameInput","forEach","column","index","toggleTaskNameInput","task","onTaskDragEnd","updateTimeRemaining","now","deadlineDate","timeDifference","days","Math","floor","hours","minutes","seconds","timeRemaining","computed","boardData","sort","a","b","components"],"sources":["C:\\Users\\user\\Desktop\\tasker5\\sortable\\src\\views\\BoardComp.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>{{ currentProject.name }}</h1>\n    <draggable v-model=\"currentProject.boards\" tag=\"div\" class=\"workspace\">\n      <template #item=\"{ element: board, index: i }\">\n        <div class=\"board\" :key=\"i\">\n          <h2>{{ board.name }}</h2>\n          <draggable v-model=\"board.columns\" tag=\"div\" class=\"column\" :key=\"i\" @end=\"onTaskDragEnd\">\n            <template #item=\"{ element: column, index: j }\">\n              <div class=\"column\" :key=\"j\">\n                <h3>{{ column.name }}</h3>\n                <draggable v-model=\"column.tasks\" tag=\"ul\" class=\"tasks\" :key=\"j\" @end=\"onTaskDragEnd\">\n                  <template #item=\"{ element: task, index: k }\">\n                    <li class=\"task\" :key=\"k\">\n                      <h4>{{ task.name }}</h4>\n                      <p>Deadline: {{ task.deadline }}</p>\n                      <p>{{ task.timeRemaining }}</p>\n                      <button @click=\"removeTask(i, j, k)\">Удалить задачу</button>\n                    </li>\n                  </template>\n                </draggable>\n                <button @click=\"addItem(i, j)\">Добавить задачу</button>\n              </div>\n            </template>\n          </draggable>\n          <button @click=\"addColumn(i)\">Добавить колонку</button>\n        </div>\n      </template>\n    </draggable>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport draggable from 'vuedraggable';\nimport { projects } from '../projects';\n\nexport default {\n  data() {\n    return {\n      projects: projects,\n      currentProject: null,\n    };\n  },\n  created() {\n    // Получаем projectId из параметров маршрута\n    const projectId = this.$route.params.projectId;\n    // Находим проект по projectId\n    this.currentProject = this.projects.find(project => project.id === parseInt(projectId));\n  },\n  // created() {\n  //   setInterval(this.updateTimeRemaining, 1000);\n  // },\n  methods: {\n    addItem(boardIndex, columnIndex) {\n      // Добавление новой задачи в выбранную колонку\n      const deadline = new Date();\n      deadline.setDate(deadline.getDate() + 1);\n      this.currentProject.boards[boardIndex].columns[columnIndex].tasks.push({\n        name: '',\n        showNameInput: false,\n        columnIndex,\n        deadline: deadline.toISOString(),\n      });\n    },\n    removeTask(boardIndex, columnIndex, taskIndex) {\n      // Удаление задачи из выбранной колонки\n      this.currentProject.boards[boardIndex].columns[columnIndex].tasks.splice(taskIndex, 1);\n    },\n    addColumn(boardIndex) {\n      // Добавление новой колонки в выбранную доску\n      this.currentProject.boards[boardIndex].columns.push({\n        name: 'Новая колонка',\n        tasks: [],\n        order: this.currentProject.boards[boardIndex].columns.length + 1,\n      });\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {\n      \n    },\n    updateTimeRemaining() {\n      const now = new Date();\n      this.columns.forEach(column => {\n        column.tasks.forEach(task => {\n          const deadlineDate = new Date(task.deadline);\n          const timeDifference = deadlineDate - now;\n          const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n          const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n          const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n          task.timeRemaining = `${days} д. ${hours} ч. ${minutes} м. ${seconds} с.`;\n        });\n      });\n    },\n  },\n  computed: {\n    // Преобразование порядка колонок в массив колонок\n    columns() {\n      return this.boardData.columns.sort((a, b) => a.order - b.order);\n    },\n  },\n  components: {\n    draggable,\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}