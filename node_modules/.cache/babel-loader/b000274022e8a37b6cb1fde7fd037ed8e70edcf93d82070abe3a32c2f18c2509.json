{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vShow as _vShow, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = [\"onUpdate:modelValue\", \"onKeyup\"];\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onUpdate:modelValue\", \"onKeyup\"];\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"form-control\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"form-control\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_draggable = _resolveComponent(\"draggable\");\n  return _openBlock(), _createElementBlock(\"main\", null, [_createElementVNode(\"h1\", null, _toDisplayString($data.projectName) + \" - Доска\", 1 /* TEXT */), _createVNode(_component_draggable, {\n    modelValue: $data.boardData.columns,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.boardData.columns = $event),\n    tag: \"div\",\n    class: \"workspace\"\n  }, {\n    item: _withCtx(({\n      element: column,\n      index: i\n    }) => [(_openBlock(), _createBlock(_component_draggable, {\n      modelValue: column.tasks,\n      \"onUpdate:modelValue\": $event => column.tasks = $event,\n      tag: \"ul\",\n      class: \"column\",\n      key: i,\n      onEnd: $options.onTaskDragEnd\n    }, {\n      header: _withCtx(() => [column.showNameInput ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": $event => column.name = $event,\n        class: \"column-name-input column-name\",\n        type: \"text\",\n        onKeyup: _withKeys($event => $options.toggleNameInput(i), [\"enter\"])\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_1)), [[_vModelText, column.name]]) : (_openBlock(), _createElementBlock(\"h3\", {\n        key: 1,\n        onClick: $event => $options.toggleNameInput(i),\n        class: \"column-name\"\n      }, [_withDirectives(_createElementVNode(\"p\", null, _toDisplayString(i), 513 /* TEXT, NEED_PATCH */), [[_vShow, column.name === '']]), _createTextVNode(\" \" + _toDisplayString(column.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_2)), _createElementVNode(\"button\", {\n        class: \"delete btn\",\n        onClick: $event => $options.removeColumn(i)\n      }, \"удалить\", 8 /* PROPS */, _hoisted_3)]),\n      item: _withCtx(({\n        element: task,\n        index: j\n      }) => [(_openBlock(), _createElementBlock(\"li\", {\n        class: \"task\",\n        key: j\n      }, [task.showNameInput ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": $event => task.name = $event,\n        class: \"task-name-input\",\n        type: \"text\",\n        onKeyup: _withKeys($event => $options.toggleTaskNameInput(i, j), [\"enter\"])\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4)), [[_vModelText, task.name]]) : (_openBlock(), _createElementBlock(\"h4\", {\n        key: 1,\n        onClick: $event => $options.toggleTaskNameInput(i, j),\n        class: \"task-name\"\n      }, [_withDirectives(_createElementVNode(\"p\", null, _toDisplayString(j), 513 /* TEXT, NEED_PATCH */), [[_vShow, task.name === '']]), _createTextVNode(\" \" + _toDisplayString(task.name) + \" \" + _toDisplayString(task.deadline) + \" \" + _toDisplayString(task.timeRemaining), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_5)), _createElementVNode(\"button\", {\n        class: \"delete btn\",\n        onClick: $event => $options.removeTask(i, j)\n      }, \"удалить\", 8 /* PROPS */, _hoisted_6)]))]),\n      footer: _withCtx(() => [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n        onClick: $event => $options.addItem(i)\n      }, \"создать таск\", 8 /* PROPS */, _hoisted_8)])]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\", \"onEnd\"]))]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addColumn && $options.addColumn(...args))\n  }, \"создать колонку\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_toDisplayString","$data","projectName","_createVNode","_component_draggable","boardData","columns","$event","tag","item","_withCtx","element","column","index","i","_createBlock","tasks","key","onEnd","$options","onTaskDragEnd","header","showNameInput","name","type","onKeyup","_withKeys","toggleNameInput","onClick","removeColumn","_hoisted_3","task","j","toggleTaskNameInput","deadline","timeRemaining","removeTask","_hoisted_6","footer","_hoisted_7","addItem","_hoisted_8","_hoisted_9","_cache","args","addColumn"],"sources":["C:\\Users\\user\\Desktop\\tasker5\\sortable\\src\\views\\BoardComp.vue"],"sourcesContent":["<template>\n  <main>\n    <h1>{{ projectName }} - Доска</h1>\n    <draggable v-model=\"boardData.columns\" tag=\"div\" class=\"workspace\">\n      <template #item=\"{ element: column, index: i }\">\n        <draggable v-model=\"column.tasks\" tag=\"ul\" class=\"column\" :key=\"i\" @end=\"onTaskDragEnd\">\n        <template #header>\n          <input\n            v-if=\"column.showNameInput\"\n            v-model=\"column.name\" class=\"column-name-input column-name\" type=\"text\"\n            @keyup.enter=\"toggleNameInput(i)\"\n          />\n          <h3\n            v-else\n            @click=\"toggleNameInput(i)\"\n            class=\"column-name\">\n            <p v-show=\"column.name === ''\">{{ i }}</p>\n            {{ column.name }}\n          </h3>\n          <button class=\"delete btn\" @click=\"removeColumn(i)\">удалить</button>\n        </template>\n        <template #item=\"{ element: task, index: j }\">\n          <li class=\"task\" :key=\"j\">\n            <input\n              v-if=\"task.showNameInput\"\n              v-model=\"task.name\" class=\"task-name-input\" type=\"text\"\n              @keyup.enter=\"toggleTaskNameInput(i, j)\"\n            />\n            <h4\n              v-else\n              @click=\"toggleTaskNameInput(i, j)\"\n              class=\"task-name\">\n              <p v-show=\"task.name === ''\">{{ j }}</p>\n              {{ task.name }}\n              {{ task.deadline }}\n              {{ task.timeRemaining }}\n            </h4>\n            <button class=\"delete btn\" @click=\"removeTask(i, j)\">удалить</button>\n          </li>\n        </template>\n        <template #footer>\n          <div class=\"form-control\">\n            <button @click=\"addItem(i)\">создать таск</button>\n          </div>\n        </template>\n      </draggable>\n      </template>\n    </draggable>\n    <div class=\"form-control\">\n      <button @click=\"addColumn\">создать колонку</button>\n    </div>\n  </main>\n</template>\n\n<script>\nimport { ref, watch } from 'vue';\nimport draggable from 'vuedraggable';\nimport { projects } from '../projects.js';\n\nexport default {\n  props: ['projectId'],\n  data() {\n    return {\n      boardData: {\n        columns: [],\n      },\n      projectName: '',\n    };\n  },\n  watch: {\n    projectId: 'loadData',\n  },\n  created() {\n    this.loadData();\n  },\n  methods: {\n    loadData() {\n      const project = projects.find((p) => p.id === parseInt(this.projectId));\n      if (project) {\n        this.projectName = project.name;\n        this.boardData.columns = project.columns;\n      }\n    },\n    addColumn() {\n      const newColumn = {\n        name: 'Новая колонка',\n        tasks: [],\n        order: this.boardData.columns.length + 1,\n      };\n      this.boardData.columns.push(newColumn);\n    },\n    addItem(columnIndex) {\n      if (this.columns[columnIndex]) {\n\n        const deadline = new Date();\n        deadline.setDate(deadline.getDate() + 1); \n        this.columns[columnIndex].tasks.push({\n          name: '',\n          showNameInput: false,\n          columnIndex,\n          deadline: deadline.toISOString(), \n        });\n      }\n    },\n    removeTask(columnIndex, taskIndex) {\n      if (this.columns[columnIndex] && this.columns[columnIndex].tasks[taskIndex]) {\n        this.columns[columnIndex].tasks.splice(taskIndex, 1);\n      }\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {\n      \n    },\n    updateTimeRemaining() {\n      const now = new Date();\n      this.columns.forEach(column => {\n        column.tasks.forEach(task => {\n          const deadlineDate = new Date(task.deadline);\n          const timeDifference = deadlineDate - now;\n          const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n          const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n          const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n          const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n          task.timeRemaining = `${days} д. ${hours} ч. ${minutes} м. ${seconds} с.`;\n        });\n      });\n    },\n  },\n  computed: {\n    // Преобразование порядка колонок в массив колонок\n    columns() {\n      return this.boardData.columns.sort((a, b) => a.order - b.order);\n    },\n  },\n  components: {\n    draggable,\n  },\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}