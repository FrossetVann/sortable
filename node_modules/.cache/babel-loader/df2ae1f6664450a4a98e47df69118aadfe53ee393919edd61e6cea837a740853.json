{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vShow as _vShow, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"доска\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"onUpdate:modelValue\", \"onKeyup\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onUpdate:modelValue\", \"onKeyup\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  class: \"form-control\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"form-control\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_draggable = _resolveComponent(\"draggable\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createVNode(_component_draggable, {\n    modelValue: $data.columns,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.columns = $event),\n    tag: \"div\",\n    class: \"workspace\"\n  }, {\n    item: _withCtx(({\n      element: column,\n      index: i\n    }) => [(_openBlock(), _createBlock(_component_draggable, {\n      modelValue: column.tasks,\n      \"onUpdate:modelValue\": $event => column.tasks = $event,\n      tag: \"ul\",\n      class: \"column\",\n      key: i,\n      onEnd: $options.onTaskDragEnd\n    }, {\n      header: _withCtx(() => [column.showNameInput ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": $event => column.name = $event,\n        class: \"column-name-input column-name\",\n        type: \"text\",\n        onKeyup: _withKeys($event => $options.toggleNameInput(i), [\"enter\"])\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_2)), [[_vModelText, column.name]]) : (_openBlock(), _createElementBlock(\"h3\", {\n        key: 1,\n        onClick: $event => $options.toggleNameInput(i),\n        class: \"column-name\"\n      }, [_withDirectives(_createElementVNode(\"p\", null, _toDisplayString(i), 513 /* TEXT, NEED_PATCH */), [[_vShow, column.name === '']]), _createTextVNode(\" \" + _toDisplayString(column.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_3)), _createElementVNode(\"button\", {\n        class: \"delete btn\",\n        onClick: $event => $options.removeColumn(i)\n      }, \"удалить\", 8 /* PROPS */, _hoisted_4)]),\n      item: _withCtx(({\n        element: task,\n        index: j\n      }) => [(_openBlock(), _createElementBlock(\"li\", {\n        class: \"task\",\n        key: j\n      }, [task.showNameInput ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": $event => task.name = $event,\n        class: \"task-name-input\",\n        type: \"text\",\n        onKeyup: _withKeys($event => $options.toggleTaskNameInput(i, j), [\"enter\"])\n      }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_5)), [[_vModelText, task.name]]) : (_openBlock(), _createElementBlock(\"h4\", {\n        key: 1,\n        onClick: $event => $options.toggleTaskNameInput(i, j),\n        class: \"task-name\"\n      }, [_withDirectives(_createElementVNode(\"p\", null, _toDisplayString(j), 513 /* TEXT, NEED_PATCH */), [[_vShow, task.name === '']]), _createTextVNode(\" \" + _toDisplayString(task.name) + \" \" + _toDisplayString($options.timeRemaining(task.deadline)), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_6)), _createElementVNode(\"button\", {\n        class: \"delete btn\",\n        onClick: $event => $options.removeTask(i, j)\n      }, \"удалить\", 8 /* PROPS */, _hoisted_7)]))]),\n      footer: _withCtx(() => [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n        onClick: $event => $options.addItem(i)\n      }, \"создать таск\", 8 /* PROPS */, _hoisted_9)])]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\", \"onEnd\"]))]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addColumn && $options.addColumn(...args))\n  }, \"создать колонку\")])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","class","_hoisted_1","_createVNode","_component_draggable","$data","columns","$event","tag","item","_withCtx","element","column","index","i","_createBlock","tasks","key","onEnd","$options","onTaskDragEnd","header","showNameInput","_createElementBlock","name","type","onKeyup","_withKeys","toggleNameInput","onClick","_toDisplayString","removeColumn","_hoisted_4","task","j","toggleTaskNameInput","timeRemaining","deadline","removeTask","_hoisted_7","footer","_hoisted_8","addItem","_hoisted_9","_hoisted_10","_cache","args","addColumn"],"sources":["C:\\Users\\user\\Desktop\\tasker5\\sortable\\src\\views\\BoardComp.vue"],"sourcesContent":["<template>\n  <h1>доска</h1>\n  <draggable v-model=\"columns\" tag=\"div\" class=\"workspace\">\n    <template #item=\"{ element: column, index: i }\">\n      <draggable v-model=\"column.tasks\" tag=\"ul\" class=\"column\" :key=\"i\" @end=\"onTaskDragEnd\">\n        <template #header>\n        <input\n          v-if=\"column.showNameInput\"\n          v-model=\"column.name\" class=\"column-name-input column-name\" type=\"text\"\n          @keyup.enter=\"toggleNameInput(i)\"\n        />\n        \n        <h3\n          v-else\n          @click=\"toggleNameInput(i)\"\n          class=\"column-name\">\n          <p v-show=\"column.name === ''\">{{ i }}</p>\n          {{ column.name }}\n        </h3>\n        <button class=\"delete btn\" @click=\"removeColumn(i)\">удалить</button>\n        </template>\n        <template #item=\"{ element: task, index: j }\">\n        <li class=\"task\" :key=\"j\">\n          <input\n            v-if=\"task.showNameInput\"\n            v-model=\"task.name\" class=\"task-name-input\" type=\"text\"\n            @keyup.enter=\"toggleTaskNameInput(i, j)\"\n          />\n          <h4\n            v-else\n            @click=\"toggleTaskNameInput(i, j)\"\n            class=\"task-name\">\n            <p v-show=\"task.name === ''\">{{ j }}</p>\n            {{ task.name }}\n            {{ timeRemaining(task.deadline) }}\n          </h4>\n          <button class=\"delete btn\" @click=\"removeTask(i, j)\">удалить</button>\n        \n        </li>\n        </template>\n        <template #footer>\n        <div class=\"form-control\">\n          <button @click=\"addItem(i)\">создать таск</button>\n        </div>\n      </template>\n      <!-- </ul> -->\n    \n    </draggable>\n    </template>\n  </draggable>\n  <div class=\"form-control\">\n    <button @click=\"addColumn\">создать колонку</button>\n\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport draggable from 'vuedraggable';\n\nexport default {\n  data() {\n    return {\n      columns: [],\n      timestamp: \"\"\n    };\n  },\n  created() {\n                setInterval(this.getNow, 1000);\n            },\n  methods: {\n    addColumn() {\n      this.columns.push({\n        name: '',\n        tasks: [],\n        showNameInput: false,\n      });\n    },\n    addItem(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns[columnIndex].tasks.push({\n          name: '',\n          showNameInput: false,\n          columnIndex, // новое свойство для хранения индекса колонки\n        });\n      }\n    },\n    removeTask(columnIndex, taskIndex) {\n      if (this.columns[columnIndex] && this.columns[columnIndex].tasks[taskIndex]) {\n        this.columns[columnIndex].tasks.splice(taskIndex, 1);\n      }\n    },\n    removeColumn(columnIndex) {\n      if (this.columns[columnIndex]) {\n        this.columns.splice(columnIndex, 1);\n      }\n    },\n    toggleNameInput(columnIndex) {\n      this.columns.forEach((column, index) => {\n        if (index !== columnIndex) {\n          column.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex] && (this.columns[columnIndex].showNameInput = !this.columns[columnIndex].showNameInput);\n    },\n    toggleTaskNameInput(columnIndex, taskIndex) {\n      this.columns[columnIndex]?.tasks.forEach((task, index) => {\n        if (index !== taskIndex) {\n          task.showNameInput = false;\n        }\n      });\n      this.columns[columnIndex]?.tasks[taskIndex] && (this.columns[columnIndex].tasks[taskIndex].showNameInput = !this.columns[columnIndex].tasks[taskIndex].showNameInput);\n    },\n    onTaskDragEnd() {\n      // Метод, вызываемый при завершении перетаскивания задачи\n      // Здесь вы можете выполнить дополнительные действия после перемещения задачи\n    },\n    timeRemaining(deadline) {\n    const now = new Date();\n    const deadlineDate = new Date(deadline);\n\n    const timeDifference = deadlineDate - now;\n\n    const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);\n\n    return `${days} дней, ${hours} часов, ${minutes} минут, ${seconds} секунд`;\n  },\n    getNow: function() {\n      const today = new Date();\n      const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n      const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      const dateTime = date +' '+ time;\n      this.timestamp = dateTime;\n      }\n  },\n  components: {\n    draggable,\n  },\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}